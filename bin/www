#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require("../app");
let fs = require("fs");
let debug = require("debug")("psdreplika:server");
let path = require("path");
let serverPackage = require("http");

let port = normalizePort(80);
app.set("port", port);

/**
 * Create server.
 */
let server = serverPackage.createServer(app);
server.timeout = 150000; // 2.5 Min

server.listen(port, () => {
    console.log(`PSD Replika SERVER: Listening on ${port}`);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
